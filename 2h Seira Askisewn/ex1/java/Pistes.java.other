import java.io.*;
import java.util.*;
import java.lang.*;

class Pista implements Comparable<Pista>{

    int id;
    HashMap<Integer, Integer> needed;
    HashMap<Integer, Integer> earnings;
    long stars;
    int numberNeeded;
    int numberEarnings;

    public Pista(int id, HashMap<Integer,Integer> needed, HashMap<Integer,Integer> earnings, long stars, int numberNeeded, int numberEarnings){
        this.id = id;
        this.needed = needed;
        this.earnings = earnings;
        this.stars = stars;
        this.numberNeeded = numberNeeded;
        this.numberEarnings = numberEarnings;
    }

    public int getID(){
        return id;
    }

    public HashMap<Integer, Integer> getNeeded(){
        return needed;
    }

    public HashMap<Integer, Integer> getEarnings(){
        return earnings;
    }

    public int getNumberOfNeeded(){
        return numberNeeded;
    }

    public int getNumberOfEarnings(){
        return numberEarnings;
    }

    public long getStars(){
        return stars;
    }

    public void setNeeded(HashMap<Integer,Integer> n){
        this.needed = n;
    }

    public void setEarnings(HashMap<Integer,Integer> e){
        this.earnings = e;
    }

    @Override
    public int compareTo(Pista p){

        int tN = p.getNumberOfNeeded();
        int tE = p.getNumberOfEarnings();
        long tS = p.getStars();
        int ret = 0;

        if (tN > this.getNumberOfNeeded()) ret = 1;
        else if (tN < this.getNumberOfNeeded()) ret = -1;
        else ret = 0;

        if (ret == 0) {
            if (tE > this.getNumberOfEarnings()) ret = -1;
            else if (tE < this.getNumberOfEarnings()) ret = +1;
            else ret = 0;
        }

        if (ret == 0) {
            if (tS > this.getStars()) ret = -1;
            else if (tS < this.getStars()) ret = +1;
            else ret = 0;
        }

        return ret;
    }


}


class Data {

    int quantity;
    ArrayList<Pista> pList;

    public Data (int quantity, ArrayList<Pista> pList){
        this.quantity = quantity;
        this.pList = pList;
    }

    public int getQuantity(){
        return quantity;
    }

    public ArrayList<Pista> getList(){
        return pList;
    }

    public void setQuantity (int quantity){
        this.quantity = quantity;
    }

    public void setList (ArrayList<Pista> pList){
        this.pList = pList;
    }

}


public class Pistes {


    public static long solver(HashMap<Integer, Data> map, long totalStars){

        if (map.isEmpty()) {
            return totalStars;
        }

        for (Map.Entry<Integer, Data> entry : map.entrySet()){
            int key = entry.getKey();
            Data data = entry.getValue();
            int q = data.getQuantity();
            ArrayList<Pista> l = data.getList();

            Collections.sort(l);
            for (Pista it : l){
                System.out.println(it.getID());
            }

            for (Pista it : l){
                System.out.println("Afairw thn " + it.getID());
                HashMap<Integer,Integer> tmp = it.getNeeded();
                int d = tmp.get(key);
                System.out.println("q : "+q+" d = " + d );
                q -= d;
                totalStars -= it.getStars();
                if (q<=0) break;
            }
        }
        return totalStars;

    }
    public static void printHashMap(HashMap<Integer, Data> map){


        if (map.isEmpty()) {
            System.out.print("Map is Empty ");
            return ;
        }

        for (Map.Entry<Integer, Data> entry : map.entrySet()){
            int key = entry.getKey();
            Data data = entry.getValue();
            int q = data.getQuantity();
            ArrayList<Pista> l = data.getList();

            System.out.print("Key: " + key + " q: " + q + " kai vriskontai stis pistes: ");
            for (Pista it : l){
                int id = it.getID();
                System.out.print(id + " ");
            }
            System.out.print("\n");
        }
    }

    public static void main (String[] args){
        try{

            BufferedReader reader = new BufferedReader(new FileReader(args[0]));
            String line = reader.readLine();
            int N = Integer.parseInt(line);
            int counter = 0;
            long totalStars = 0;
            ArrayList<Pista> allPistes = new ArrayList<Pista>();
            HashMap<Integer,Data> totalNeeded = new HashMap<Integer,Data>();
            HashMap<Integer,Data> totalEarnings = new HashMap<Integer,Data>();
            HashMap<Integer,Data> toDelete = new HashMap<Integer, Data>();

            line = reader.readLine();
            while(line != null && !(line.matches("\\s*"))) {

                String[] splitted = line.split(" ");
                int curN = splitted.length, kneeded = Integer.parseInt(splitted[0]), kearnings = Integer.parseInt(splitted[1]);
                long curStars = Long.parseLong(splitted[2]);
                totalStars += curStars;
                int j = 3;
                HashMap<Integer,Integer> curNeeded = new HashMap<Integer,Integer>();
                HashMap<Integer,Integer> curEarnings = new HashMap<Integer,Integer>();


                Pista newPista = new Pista(counter++,null,null,curStars, kneeded, kearnings);

                for(int i = 0; i < kneeded; i++){
                    int tmp = Integer.parseInt(splitted[j]);

                    if(curNeeded.containsKey(tmp)) {
                        curNeeded.put(tmp, curNeeded.get(tmp) + 1);
                    }
                    else curNeeded.put(tmp,1);

                    if(totalNeeded.containsKey(tmp)) {
                        Data tmpData = totalNeeded.get(tmp);
                        ArrayList<Pista> l = tmpData.getList();
                        l.add(newPista);
                        int q = tmpData.getQuantity();
                        tmpData.setQuantity(++q);
                        totalNeeded.put(tmp, tmpData);
                    }
                    else {
                        ArrayList<Pista> newL = new ArrayList<Pista>();
                        newL.add(newPista);
                        Data newData = new Data(1,newL);
                        totalNeeded.put(tmp,newData);
                    }
                    j++;
                }


                for(int i = 0; i < kearnings; i++){
                    int tmp = Integer.parseInt(splitted[j]);

                    if(curEarnings.containsKey(tmp)) {
                        curEarnings.put(tmp, curEarnings.get(tmp) + 1);
                    }
                    else curEarnings.put(tmp,1);

                    if(totalEarnings.containsKey(tmp)) {
                        Data tmpData = totalEarnings.get(tmp);
                        ArrayList<Pista> l = tmpData.getList();
                        l.add(newPista);
                        int q = tmpData.getQuantity();
                        tmpData.setQuantity(++q);
                        totalEarnings.put(tmp, tmpData);
                    }
                    else {
                        ArrayList<Pista> newL = new ArrayList<Pista>();
                        newL.add(newPista);
                        Data newData = new Data(1,newL);
                        totalEarnings.put(tmp,newData);
                    }
                    j++;
                }

                newPista.setNeeded(curNeeded);
                newPista.setEarnings(curEarnings);
                allPistes.add(newPista);
                line = reader.readLine();
            }

            System.out.println("Ta kleidia pou tha kerdisw einai ta ");
            printHashMap(totalEarnings);
            System.out.println("ta kleidia pou tha xasw einia ta ");
            printHashMap(totalNeeded);

        for (Map.Entry<Integer, Data> entry : totalNeeded.entrySet()){
            int key = entry.getKey();
            Data data = entry.getValue();
            int q = data.getQuantity();
            ArrayList<Pista> l = data.getList();

            if (totalEarnings.containsKey(key)) {
                Data t = totalEarnings.get(key);
                if (q > t.getQuantity()){
                    ArrayList<Pista> newL = l;
                    int quantity = Math.abs(q-t.getQuantity());
                    Data newData = new Data(quantity,newL);
                    toDelete.put(key,newData);
                }
            }

        }

        System.out.println("Ta kleidia pou prepei na vgoun einai ta ");
        printHashMap(toDelete);
        totalStars = solver(toDelete,totalStars);
        System.out.println(totalStars);

        }
        catch(IOException e){
            e.printStackTrace();
        }
    }

}
